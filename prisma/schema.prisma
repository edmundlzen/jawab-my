// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    questions     Question[]
    questionVotes QuestionVote[]
    questionComments QuestionComment[]
    answers       Answer[]
    answerVotes   AnswerVote[]
    answerComments   AnswerComment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Subject {
    mathematics
    english
    malay
    chinese
    history
    tamil
    physics
    biology
    chemistry
    science
    modern_mathematics
    additional_mathematics
}

enum Form {
    transition
    one
    two
    three
    four
    five
}

enum VoteType {
    up
    down
}

model Question {
    id        String         @id @default(cuid())
    subject   Subject
    form      Form
    title     String
    content   String
    userId    String
    tags      Tag[]
    votes     QuestionVote[]
    answers   Answer[]
    comments  QuestionComment[]
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @default(now())
}

model QuestionVote {
    id         Int      @id @default(autoincrement())
    userId     String
    questionId String
    voteType   VoteType
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([userId, questionId])
}

model QuestionComment {
    id         String   @id @default(cuid())
    userId     String
    questionId String
    content    String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @default(now())
}

model Tag {
    id        String     @id @default(cuid())
    name      String     @unique
    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now())
    questions Question[]
}

model Answer {
    id        String         @id @default(cuid())
    questionId String
    content   String
    userId    String
    votes     AnswerVote[]
    comments   AnswerComment[]
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    question  Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @default(now())

    @@unique([questionId, userId])
}

model AnswerVote {
    id         Int      @id @default(autoincrement())
    userId     String
    answerId   String
    voteType   VoteType
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    answer     Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)

    @@unique([userId, answerId])
}

model AnswerComment {
    id        String         @id @default(cuid())
    answerId  String
    content   String
    userId    String
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    answer    Answer         @relation(fields: [answerId], references: [id], onDelete: Cascade)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @default(now())
}